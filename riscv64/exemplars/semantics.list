GAS LISTING assemblySamples/semantics.S 			page 1


   1              	 
   2              	 
   3              	 /*
   4              	  * Collect sample C utilities using vector instructions from
   5              	  * https://github.com/riscv/riscv-v-spec/tree/master/example
   6              	  *
   7              	  * Use these for prioritization of semantics
   8              	 */
   9              	 .text
  10              	    .balign 4
  11              	    .global memcpy
  12              	    # void *memcpy(void* dest, const void* src, size_t n)
  13              	    # a0=dest, a1=src, a2=n
  14              	    #
  15              	  memcpy:
  16 0000 93060500 	      mv a3, a0 # Copy destination
  17              	  1:
  18 0004 D772360C 	    vsetvli t0, a2, e8, m8, ta, ma   # Vectors of 8b
  19 0008 07800502 	    vle8.v v0, (a1)               # Load bytes
  20 000c B3855500 	      add a1, a1, t0              # Bump pointer
  21 0010 33065640 	      sub a2, a2, t0              # Decrement count
  22 0014 27800602 	    vse8.v v0, (a3)               # Store bytes
  23 0018 B3865600 	      add a3, a3, t0              # Bump pointer
  24 001c E31406FE 	      bnez a2, 1b                 # Any more?
  25 0020 67800000 	      ret                         # Return
  26              	
  27              	
  28              	  # int strcmp(const char *src1, const char* src2)
  29              	strcmp:
  30              	    ##  Using LMUL=2, but same register names work for larger LMULs
  31 0024 13030000 	    li t1, 0                # Initial pointer bump
  32              	1:
  33 0028 D772100C 	    vsetvli t0, x0, e8, m2, ta, ma  # Max length vectors of bytes
  34 002c 33056500 	    add a0, a0, t1          # Bump src1 pointer
  35 0030 07040503 	    vle8ff.v v8, (a0)       # Get src1 bytes
  36 0034 B3856500 	    add a1, a1, t1          # Bump src2 pointer
  37 0038 07880503 	    vle8ff.v v16, (a1)      # Get src2 bytes
  38              	
  39 003c 57308062 	    vmseq.vi v0, v8, 0      # Flag zero bytes in src1
  40 0040 D7008866 	    vmsne.vv v1, v8, v16    # Flag if src1 != src2
  41 0044 57A0006A 	    vmor.mm v0, v0, v1      # Combine exit conditions
  42              	    
  43 0048 57A60842 	    vfirst.m a2, v0         # ==0 or != ?
  44 004c 732300C2 	    csrr t1, vl             # Get number of bytes fetched
  45              	    
  46 0050 E34C06FC 	    bltz a2, 1b             # Loop if all same and no zero byte
  47              	
  48 0054 3305C500 	    add a0, a0, a2          # Get src1 element address
  49 0058 83460500 	    lbu a3, (a0)            # Get src1 byte from memory
  50              	
  51 005c B385C500 	    add a1, a1, a2          # Get src2 element address
  52 0060 03C70500 	    lbu a4, (a1)            # Get src2 byte from memory
  53              	
  54 0064 3385E640 	    sub a0, a3, a4          # Return value.
  55              	
  56 0068 67800000 	    ret
  57              	
GAS LISTING assemblySamples/semantics.S 			page 2


  58              	
  59              	    .global strcpy
  60              	  # char* strcpy(char *dst, const char* src)
  61              	strcpy:
  62 006c 13060500 	      mv a2, a0             # Copy dst
  63 0070 9302F0FF 	      li t0, -1             # Infinite AVL
  64              	1:
  65 0074 57F0320C 	    vsetvli x0, t0, e8, m8, ta, ma  # Max length vectors of bytes
  66 0078 07840503 	    vle8ff.v v8, (a1)        # Get src bytes
  67 007c 732300C2 	      csrr t1, vl           # Get number of bytes fetched
  68 0080 D7308062 	    vmseq.vi v1, v8, 0      # Flag zero bytes
  69 0084 D7A61842 	    vfirst.m a3, v1         # Zero found?
  70 0088 B3856500 	      add a1, a1, t1        # Bump pointer
  71 008c 57A01152 	    vmsif.m v0, v1          # Set mask up to and including zero byte.
  72 0090 27040600 	    vse8.v v8, (a2), v0.t   # Write out bytes
  73 0094 33066600 	      add a2, a2, t1        # Bump pointer
  74 0098 E3CE06FC 	      bltz a3, 1b           # Zero byte not found, so loop
  75              	
  76 009c 67800000 	      ret
  77              	
  78              	    .global strlen
  79              	# size_t strlen(const char *str)
  80              	# a0 holds *str
  81              	
  82              	strlen:
  83 00a0 93060500 	    mv a3, a0             # Save start
  84              	1:
  85 00a4 D775300C 	    vsetvli a1, x0, e8, m8, ta, ma  # Vector of bytes of maximum length
  86 00a8 07840603 	    vle8ff.v v8, (a3)      # Load bytes
  87 00ac F32500C2 	    csrr a1, vl           # Get bytes read
  88 00b0 57308062 	    vmseq.vi v0, v8, 0    # Set v0[i] where v8[i] = 0
  89 00b4 57A60842 	    vfirst.m a2, v0       # Find first set bit
  90 00b8 B386B600 	    add a3, a3, a1        # Bump pointer
  91 00bc E34406FE 	    bltz a2, 1b           # Not found?
  92              	
  93 00c0 3305B500 	    add a0, a0, a1        # Sum start + bump
  94 00c4 B386C600 	    add a3, a3, a2        # Add index
  95 00c8 3385A640 	    sub a0, a3, a0        # Subtract start address+bump
  96              	
  97 00cc 67800000 	    ret
  98              	 
  99              	    .global strncpy
 100              	  # char* strncpy(char *dst, const char* src, size_t n)
 101              	strncpy:
 102 00d0 93060500 	      mv a3, a0             # Copy dst
 103              	1:
 104 00d4 5770360C 	    vsetvli x0, a2, e8, m8, ta, ma   # Vectors of bytes.
 105 00d8 07840503 	    vle8ff.v v8, (a1)        # Get src bytes
 106 00dc D7308062 	    vmseq.vi v1, v8, 0      # Flag zero bytes
 107 00e0 732300C2 	      csrr t1, vl           # Get number of bytes fetched
 108 00e4 57A71842 	    vfirst.m a4, v1         # Zero found?
 109 00e8 57A01052 	    vmsbf.m v0, v1          # Set mask up to before zero byte.
 110 00ec 27840600 	    vse8.v v8, (a3), v0.t    # Write out non-zero bytes
 111 00f0 635C0700 	      bgez a4, zero_tail    # Zero remaining bytes.
 112 00f4 33066640 	      sub a2, a2, t1        # Decrement count.
 113 00f8 B3866600 	      add a3, a3, t1        # Bump dest pointer
 114 00fc B3856500 	      add a1, a1, t1        # Bump src pointer
GAS LISTING assemblySamples/semantics.S 			page 3


 115 0100 E31A06FC 	      bnez a2, 1b         # Anymore?
 116              	
 117 0104 67800000 	      ret
 118              	
 119              	zero_tail:
 120 0108 3306E640 	    sub a2, a2, a4          # Subtract count on non-zero bytes.
 121 010c B386E600 	    add a3, a3, a4          # Advance past non-zero bytes.
 122 0110 5773360C 	    vsetvli t1, a2, e8, m8, ta, ma   # Vectors of bytes.
 123 0114 5730005E 	    vmv.v.i v0, 0           # Splat zero.
 124              	
 125              	zero_loop:
 126 0118 27800602 	    vse8.v v0, (a3)          # Store zero.
 127 011c 33066640 	      sub a2, a2, t1        # Decrement count.
 128 0120 B3866600 	      add a3, a3, t1        # Bump pointer
 129 0124 5773360C 	      vsetvli t1, a2, e8, m8, ta, ma   # Vectors of bytes.
 130 0128 E31806FE 	      bnez a2, zero_loop    # Anymore?
 131              	
 132 012c 67800000 	      ret
GAS LISTING assemblySamples/semantics.S 			page 4


DEFINED SYMBOLS
assemblySamples/semantics.S:15     .text:0000000000000000 memcpy
assemblySamples/semantics.S:16     .text:0000000000000000 $xrv64i2p1_m2p0_a2p1_f2p2_d2p2_v1p0_zicsr2p0_zifencei2p0_zmmul1p0_zve32f1p0_zve32x1p0_zve64d1p0_zve64f1p0_zve64x1p0_zvl128b1p0_zvl32b1p0_zvl64b1p0
assemblySamples/semantics.S:29     .text:0000000000000024 strcmp
assemblySamples/semantics.S:61     .text:000000000000006c strcpy
assemblySamples/semantics.S:82     .text:00000000000000a0 strlen
assemblySamples/semantics.S:101    .text:00000000000000d0 strncpy
assemblySamples/semantics.S:119    .text:0000000000000108 zero_tail
assemblySamples/semantics.S:125    .text:0000000000000118 zero_loop
assemblySamples/semantics.S:17     .text:0000000000000004 .L11
assemblySamples/semantics.S:32     .text:0000000000000028 .L12
assemblySamples/semantics.S:64     .text:0000000000000074 .L13
assemblySamples/semantics.S:84     .text:00000000000000a4 .L14
assemblySamples/semantics.S:103    .text:00000000000000d4 .L15

NO UNDEFINED SYMBOLS
